#!/bin/bash
#
# Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
#ident	"@(#)postgres_og	1.1	08/04/30 SMI"

. /lib/svc/share/smf_include.sh

# SMF_FMRI is the name of the target service. This allows multiple instances 
# to use the same script.

usage() {
  echo "usage: $0 -D /pgsql/data/path -B /pgsql/bin/path -L /pgsql/log/path"
  echo ""
  echo "   This script must be run as the 'postgres' user. "
  echo "   If run without arguments, it will read startup values from"
  echo "   the SMF system."
  echo ""
}

getproparg() {
        val=`svcprop -p $1 $SMF_FMRI`
        [ -n "$val" ] && echo $val
}

check_data_dir() {
	if [ ! -d $PGDATA ]; then
                /bin/mkdir $PGDATA
		if [ ! -d $PGDATA ]; then
			echo "Error: postgresql_og/data directory $PGDATA does not exist and could not be created"
			exit $SMF_EXIT_ERR_CONFIG
		fi
	fi

	if [ ! -w $PGDATA ]; then
		echo "Error: postgresql_og/data directory $PGDATA is not writable by postgres"
		exit $SMF_EXIT_ERR_CONFIG
	fi

	if [ ! -d $PGDATA/base -o ! -d $PGDATA/global -o ! -f $PGDATA/PG_VERSION ]; then
		# If the directory is empty we can create the database files
		# on behalf of the user using initdb
		if [ `ls -a $PGDATA | wc -w` -le 2 ]; then
			echo "Notice: postgresql_og/data directory $PGDATA is empty"
			echo "Calling '$PGBIN/initdb -D $PGDATA' to initialize"

			$PGBIN/initdb -D $PGDATA
			if [ $? -ne 0 ]; then
				echo "Error: initdb failed"
				exit $SMF_EXIT_ERR
			fi
		else
			echo "Error: postgresql_og/data directory $PGDATA is not empty, nor is it a valid PostgreSQL data directory"
			exit $SMF_EXIT_ERR_CONFIG
		fi
	fi
}

id=`id | grep postgres`

# Read important variables from the commandline
while getopts B:D:L: opt
do
  case "$opt" in
    B) PGBIN=$OPTARG;;
    D) PGDATA=$OPTARG;;
    L) PGLOG=$OPTARG;;
    *) usage;;
  esac
done

# We have to run this script as postgres
if [ "x" == "x$id" ]; then
  echo "Error: $0 must be run as user 'postgres'"
  exit $SMF_EXIT_ERR
fi

# Read the important variables from SMF if they aren't provided on the
# commandline
if [ ! -n $PGBIN ]; then
  PGBIN=`getproparg postgresql_og/bin`
  COMMANDLINE=1
fi
if [ ! -n $PGDATA ]; then
  PGDATA=`getproparg postgresql_og/data`
  COMMANDLINE=1
fi
if [ ! -n $PGLOG ]; then
  PGLOG=`getproparg postgresql_og/log`
  COMMANDLINE=1
fi

if [ -z $SMF_FMRI ]; then
	echo "Error: SMF framework variables are not initialized"
	exit $SMF_EXIT_ERR
fi

if [ -z $PGDATA ]; then
        echo "Error: postgresql_og/data property not set"
        exit $SMF_EXIT_ERR_CONFIG
fi

if [ ! -n $COMMANDLINE ] && [ -z $PGLOG ]; then
        echo "Error: postgresql_og/log property not set"
        exit $SMF_EXIT_ERR_CONFIG
fi


case "$1" in
'start')
	check_data_dir
        $PGBIN/pg_ctl -D $PGDATA -l $PGDATA/$PGLOG start
        ;;

'stop')
        $PGBIN/pg_ctl -D $PGDATA stop
        ;;

'refresh')
        $PGBIN/pg_ctl -D $PGDATA reload
        ;;

*)
        echo "Usage: $0 {start|stop|refresh}"
        exit 1
        ;;

esac
exit $SMF_EXIT_OK
